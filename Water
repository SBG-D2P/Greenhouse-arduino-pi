import Adafruit_DHT
import subprocess
import time
import RPi.GPIO as GPIO
import urllib.request, urllib.parse, urllib.error
import http.client
import minimalmodbus
import datetime
import serial
import pandas as pd
import numpy as np



Water1 = minimalmodbus.Instrument('/dev/ttyUSB0', 2) #port name , slave address(in decimal)
Water1.serial.baudrate                                      = 19200
Water1.serial.bytesize                                      = 8
Water1.serial.parity                                        = serial.PARITY_NONE
Water1.serial.stopbits                                      = 1
Water1.serial.timeout                                       = 1                             # secondes
Water1.mode                                                 = minimalmodbus.MODE_RTU        # rtu ou ascii // MODE_ASCII ou MODE_RTU
Water1.debug                                                = False
Water1.serial.xonxoff                                       = True
Water1.serial.rtscts                                        = False
Water1.serial.dsrdtr                                        = False
minimalmodbus.CLOSE_PORT_AFTER_EACH_CALL        = True


#--------------------------------------------------------------------------------------------------------------------------------------

Probes = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] # array to check which probes are plugged
#Slave = 2

def ProbesPlugged(Slave):#ask hub to check which probes are plugged and convert 16bit number into an array

    #Water1.write_register(1, 1, 0)#array position 1 mode "plugged"
    #time.sleep(10)
    num = Water1.read_register(4,0) #fetch info about which probes are plugged (position 4 of array, 0 decimal)
    for n in range(1,17):
        bitpos = n
        Probes[n-1] = (num >> (bitpos-1))&1
    print(Probes)
    return Probes
#--------------------------------------------------------------------------------------------------------------------------------------


#-------------------------------GATHERS-DATA-AS-CSV------------------------------------------------------------------------------------
#ProbeID = 0
TemporaryData = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]#measure for level 0-15 and 16 = Temp°C, 17 = Humi%, 18 = slaveID + prodeID, 19 = Date
def FetchData(ProbeID):

    TemporaryData = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    TemporaryData[18] = str(Slave) + '-' + str(ProbeID)#identifiyer for each plant
    Water1.write_register(2, ProbeID, 0) #tells which probe to get data from -- array position 2 probe n
    time.sleep(.04)
    Water1.write_register(1, 2, 0) #tells slave to measure (mode 2) indicated probe
    time.sleep(10)
    for i in range(0,16):#loops between each level of the probe
        Water1.write_register(7, i, 0) #tells which level of the probe to get data from -- array position 7 probe n
        time.sleep(.04)
        Water1.write_register(1, 3, 0)#tells arduino to enter data transfer mode
        time.sleep(0.1)
        TemporaryData[i] = Water1.read_register(3, 0)#read value written by arduino for measurement
        time.sleep(0.05)
    print(TemporaryData)
    return TemporaryData

                            
#-------------------------------TEMPERATURE-AND-HUMIDITY-VIA-DHT-----------------------------------------------------------------------

#Setup parameters needed to run only once for the DHT function
 
#For the data array in the temperature
columns=['A', 'B', 'C']

#Creat data storage for tempareture and humidity
HT = [0] * 2
for n in range(2):
    HT[n] = [0]*24
Havg = 0
Tavg = 0

def DHTWrite():

    df2 = pd.read_csv('AvgHT.csv',names=columns, header=None)
    Water1.write_register(1, 5, 0)#Tell arduino to enter DHT mode
    time.sleep(0.04)
    T = Water1.read_register(5, 1)
    #print(T,'°C' )
    H = Water1.read_register(6, 0)
    #print(H,'%')
    t = datetime.datetime.now()
    HT[0][t.hour] = H
    HT[1][t.hour] = T
    #print(HT)
    print(df2)
    #df2 = pd.DataFrame(np.array(HT))
    df2.at[t.hour,'B'] = HT[0][t.hour]
    df2.at[t.hour,'C'] = 10 * HT[1][t.hour]# x10 because df doesnt take float
    #df2_transposed = df2.T
    print(df2)
    time.sleep(0.04)
    df2.to_csv('AvgHT.csv', mode='w' ,index=False, header=False)
    time.sleep(1)
    

def DHTRead():

    df2 = pd.read_csv('AvgHT.csv',names=columns, header=None)
    Havg = df2['B'].mean()
    Tavg = df2['C'].mean()
    Havg = round(Havg,0)
    Tavg = round(Tavg,0)/10#/10 to convert back int to float
    return [Havg, Tavg]
    
#--------------------------------------------------------------------------------------------------------------------------------------

#-------------------------------SAVE-DATA-AS-CSV---------------------------------------------------------------------------------------

def DataToCSV():

    DHTRead()
    TemporaryData[16] = Tavg
    TemporaryData[17] = Havg
    TemporaryData[19] = datetime.datetime.now()
    df1 = pd.DataFrame(np.array(TemporaryData))
    df1_transposed = df1.T
    time.sleep(0.04)
    df1_transposed.to_csv('Data.csv', mode='a', sep= '\t', index=False, header=False)



#--------------------------------FUNCTION-CALLED-BY-MAIN-------------------------------------------------------------------------------

def Measurement():

    Probes = ProbesPlugged(Slave)
    print(Probes)
    time.sleep(0.1)

    TemporaryData = FetchData(ProbeID)
    time.sleep(0.1)
    print(TemporaryData)

    DHTWrite()
    time.sleep(0.1)

    [Havg, Tavg] = DHTRead()
    time.sleep(0.1)

    DataToCSV()

